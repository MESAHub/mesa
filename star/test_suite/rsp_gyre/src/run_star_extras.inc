subroutine extras_startup(id, restart, ierr)
   integer, intent(in) :: id
   logical, intent(in) :: restart
   integer, intent(out) :: ierr
   type (star_info), pointer :: s
   ierr = 0
   call star_ptr(id, s, ierr)
   if (ierr /= 0) return
   call test_suite_startup(s, restart, ierr)
end subroutine extras_startup


! returns either keep_going or terminate.
integer function extras_finish_step(id)
   integer, intent(in) :: id
   integer :: ierr
   real(dp) :: target_period, rel_run_E_err
   type (star_info), pointer :: s
   ierr = 0
   call star_ptr(id, s, ierr)
   if (ierr /= 0) return
   extras_finish_step = keep_going
   if (s% x_integer_ctrl(1) <= 0) return
   if (s% rsp_num_periods < s% x_integer_ctrl(1)) return
   write(*, *)
   write(*, *)
   write(*, *)
   target_period = s% x_ctrl(1)
   rel_run_E_err = s% cumulative_energy_error / s% total_energy
   write(*, *) 'rel_run_E_err', rel_run_E_err
   if (s% total_energy /= 0d0 .and. abs(rel_run_E_err) > 1d-5) then
      write(*, *) '*** BAD rel_run_E_error ***', &
            s% cumulative_energy_error / s% total_energy
   else if (abs(s% rsp_period / (24 * 3600) - target_period) > 1d-2) then
      write(*, *) '*** BAD ***', s% rsp_period / (24 * 3600) - target_period, &
            s% rsp_period / (24 * 3600), target_period
   else
      write(*, *) 'good match for period', &
            s% rsp_period / (24 * 3600), target_period
   end if
   write(*, *)
   write(*, *)
   write(*, *)
   extras_finish_step = terminate
end function extras_finish_step


subroutine extras_after_evolve(id, ierr)
   integer, intent(in) :: id
   integer, intent(out) :: ierr
   type (star_info), pointer :: s
   real(dp) :: dt
   ierr = 0
   call star_ptr(id, s, ierr)
   if (ierr /= 0) return
   call test_suite_after_evolve(s, ierr)
end subroutine extras_after_evolve


! returns either keep_going, retry, or terminate.
integer function extras_check_model(id)
   integer, intent(in) :: id
   integer :: ierr
   type (star_info), pointer :: s
   ierr = 0
   call star_ptr(id, s, ierr)
   if (ierr /= 0) return
   extras_check_model = keep_going
end function extras_check_model


integer function how_many_extra_history_columns(id)
   integer, intent(in) :: id
   integer :: ierr
   type (star_info), pointer :: s
   ierr = 0
   call star_ptr(id, s, ierr)
   if (ierr /= 0) return
   how_many_extra_history_columns = 0
end function how_many_extra_history_columns


subroutine data_for_extra_history_columns(id, n, names, vals, ierr)
   integer, intent(in) :: id, n
   character (len = maxlen_history_column_name) :: names(n)
   real(dp) :: vals(n)
   integer, intent(out) :: ierr
   type (star_info), pointer :: s
   ierr = 0
   call star_ptr(id, s, ierr)
   if (ierr /= 0) return
end subroutine data_for_extra_history_columns


integer function how_many_extra_profile_columns(id)
   use star_def, only : star_info
   integer, intent(in) :: id
   integer :: ierr
   type (star_info), pointer :: s
   ierr = 0
   call star_ptr(id, s, ierr)
   if (ierr /= 0) return
   how_many_extra_profile_columns = 0
end function how_many_extra_profile_columns


subroutine data_for_extra_profile_columns(id, n, nz, names, vals, ierr)
   use star_def, only : star_info, maxlen_profile_column_name
   use const_def, only : dp
   integer, intent(in) :: id, n, nz
   character (len = maxlen_profile_column_name) :: names(n)
   real(dp) :: vals(nz, n)
   integer, intent(out) :: ierr
   type (star_info), pointer :: s
   integer :: k
   ierr = 0
   call star_ptr(id, s, ierr)
   if (ierr /= 0) return
end subroutine data_for_extra_profile_columns
      
