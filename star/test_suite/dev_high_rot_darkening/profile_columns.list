! profile_columns.list -- determines the contents of star model profiles
! you can use a non-standard version by setting profile_columns_file in your inlist

! units are cgs unless otherwise noted.

! reorder the following names as desired to reorder columns.
! comment out the name to omit a column (fewer columns => less IO => faster running).
! remove '!' to restore a column.

! if you have a situation where you want a non-standard set of columns,
! make a copy of this file, edit as desired, and give the new filename in your inlist
! as profile_columns_file.   if you are just adding columns, you can 'include' this file,
! and just list the additions in your file.   note: to include the standard default
! version, use include '' -- the 0 length string means include the default file.

! if you need to have something added to the list of options, let me know....


! the first few lines of the profile contain general info about the model.
! for completeness, those items are described at the end of this file.


! note: you can include another list by doing
!        include 'filename'
!        include '' means include the default standard list file


! the following lines of the profile contain info for 1 zone per row, surface to center.
   
   zone ! numbers start with 1 at the surface
   logT ! log10(temperature) at center of zone
   logRho ! log10(density) at center of zone
   logP ! log10(pressure) at center of zone
   logR ! log10(radius/Rsun) at outer boundary of zone
   !log_column_depth ! log10 column depth, exterior mass / area (g cm^-2)
   !log_radial_depth ! log10 radial distance to surface (cm)
   luminosity ! luminosity at outer boundary of zone (in Lsun units)
      ! -(4 pi r^2)^2 a c / (3 kap) d(T^4)/dm
   !lum_conv_div_lum_rad
   !lum_rad_div_L_Edd
   !lum_conv_div_lum_Edd
   !lum_conv_div_L
   !lum_rad_div_L
   !lum_rad_div_L_Edd_sub_fourPrad_div_PchiT ! density increases outward if this is > 0
      ! see Joss, Salpeter, and Ostriker, "Critical Luminosity", ApJ 181:429-438, 1973. 
   !log_Lrad
   !grav ! gravitational acceleration (cm sec^2)
   !log_g ! log10 gravitational acceleration (cm sec^2)
   !g_div_r ! grav/radius (sec^2)
   !r_div_g ! radius/grav (sec^-2)
   !cgrav_factor ! = cgrav(k)/standard_cgrav
   eps_grav ! -T*ds/dt (negative for expansion)
   log_abs_eps_grav_dm_div_L
   signed_log_eps_grav ! sign(eps_grav)*log10(max(1,abs(eps_grav)))
   !net_nuclear_energy ! erg/gm/s from nuclear reactions minus all neutrino losses
      ! The value plotted is net_nuclear_energy = sign(val)*log10(max(1,abs(val)))
      ! where val = net nuclear energy minus all neutrino losses.
   net_energy ! net_energy + eps_grav.
      ! The value plotted is net_energy = sign(val)*log10(max(1,abs(val)))
      ! where val = net nuclear energy plus eps_grav minus all neutrino losses.
   !eps_nuc_plus_nuc_neu
   !logL ! log10(max(1d-2,L/Lsun))
   log_Ledd ! log10(Leddington/Lsun) -- local Ledd, 4 pi clight G m / kap
   !log_L_div_Ledd ! log10(max(1d-12,L/Leddington))
   log_Lrad_div_Ledd
   !log_Lrad_div_L
   signed_log_power ! sign(L)*log10(max(1,abs(L))) 
   velocity ! velocity at outer boundary of zone -- 0 if no velocity variable
   entropy ! specific entropy divided by (avo*kerg)
   mixing_type ! mixing types are defined in mesa/mlt/public/mlt_def
   csound ! sound speed
   v_div_csound ! velocity divided by sound speed
   !v_div_r ! velocity divided by radius
   !scale_height ! in Rsun units
   eta ! electron degeneracy parameter (eta >> 1 for significant degeneracy)
   mu ! mean molecular weight per gas particle (ions + free electrons)
   logdq ! log10(dq)
   dq_ratio ! dq(k-1)/dq(k)
   q ! fraction of star mass interior to outer boundary of this zone
   log_q ! log10(q)
   radius ! radius at outer boundary of zone (in Rsun units)
   rmid ! radius at center by mass of zone (in Rsun units)
   !r_div_R ! fraction of total radius
   temperature ! temperature at center of zone
   tau ! optical depth
   logtau ! log10(optical depth) at center of zone
   pressure ! total pressure at center of zone (pgas + prad)
   !pgas ! gas pressure at center of zone (electrons and ions)
   pgas_div_ptotal ! pgas/pressure
      ! if phi < Lrad/Ledd, then will get density inversion
      ! see Joss, Salpeter, Ostriker, "Critical Luminosity", ApJ 181: 429-438, 1973.
   logPgas ! log10(pgas)
   !prad ! radiation pressure at center of zone
   !energy ! internal energy (ergs/g)
   !logE ! log10(specific internal energy) at center of zone
   grada ! dlnT_dlnP at constant S
   !dE_dRho ! at constant T
   !cv ! specific heat at constant volume
   !cp ! specific heat at constant total pressure
   !log_CpT
   !logS ! log10(specific entropy)
   !logS_per_baryon ! log10(specific entropy per baryon / kerg)
   !gamma1 ! dlnP_dlnRho at constant S
   !gamma3 ! gamma3 - 1 = dlnT_dlnRho at constant S
   !gam ! plasma interaction parameter (> 160 or so means starting crystallization)
   free_e ! free_e is mean number of free electrons per nucleon
   !logfree_e ! log10(free_e), free_e is mean number of free electrons per nucleon
   !chiRho ! dlnP_dlnRho at constant T
   !chiT ! dlnP_dlnT at constant Rho
   x_mass_fraction_H
   y_mass_fraction_He
   z_mass_fraction_metals
   abar ! average atomic weight (g/mole)
   !zbar ! average charge
   !z2bar ! average charge^2
   ye ! average charge per baryon = proton fraction
   !opacity ! opacity measured at center of zone
   log_opacity ! log10(opacity)
   eps_nuc ! ergs/g/sec from nuclear reactions (reaction neutrinos subtracted)
   log_abs_eps_nuc
   d_lnepsnuc_dlnd
   !d_epsnuc_dlnd
   d_lnepsnuc_dlnT
   !d_epsnuc_dlnT
   !eps_nuc_neu_total ! erg/gm/sec as neutrinos from nuclear reactions
   non_nuc_neu ! non-nuclear-reaction neutrino losses
   !nonnucneu_plas ! plasmon neutrinos (for collective reactions like gamma_plasmon => nu_e + nubar_e)
   !nonnucneu_brem ! bremsstrahlung (for reactions like e- + (z,a) => e- + (z,a) + nu + nubar)
   !nonnucneu_phot ! photon neutrinos (for reactions like e- + gamma => e- + nu_e + nubar_e)
   !nonnucneu_pair ! pair production (for reactions like e+ + e- => nu_e + nubar_e)
   
   !extra_heat
   !extra_L ! extra_heat integrated from center (Lsun)
   !log_extra_L ! log10 integrated from center (Lsun)
   
   !log_irradiation_heat
   mlt_mixing_length ! mixing length for mlt (cm)
   mlt_mixing_type ! value returned by mlt
         ! P is increased by factor (1 + conv_dP_term) by inclusion of convective turbulence
         
   gradT_sub_grada ! gradT-grada at cell boundary 
   gradT_div_grada ! gradT/grada at cell boundary 
   log_mlt_Gamma ! convective efficiency
   
   log_D_mix ! log10 diffusion coefficient for mixing in units of cm^2/second (Eulerian)
   log_D_mix_non_rotation
   !log_sig_mix ! sig(k) is mixing flow across face k in (gm sec^1)
         ! sig(k) = D_mix*(4*pi*r(k)**2*rho_face)**2/dmavg
         ! this is raw_sig(k)/siglimit(k)
         ! where siglimit(k) = sig_term_limit*min(dm(k),dm(k-1))/dt
         ! and raw_sig(k) is sig(k) before it is set to min(siglimit(k),raw_sig(k))
   log_conv_vel ! log10 convection velocity (cm/sec)
   conv_vel_div_csound ! convection velocity divided by sound speed
   !conv_vel_div_L_vel ! L_vel is velocity needed to carry L by convection; L = 4*pi*r^2*rho*vel**3
   log_mlt_D_mix ! log10 diffusion coefficient for mixing from mlt (cm^2/sec)
   pressure_scale_height ! in Rsun units
   
   log_D_conv ! D_mix for regions where mix_type = convective_mixing
   log_D_semi ! D_mix for regions where mix_type = semiconvective_mixing
   log_D_ovr ! D_mix for regions where mix_type = overshoot_mixing
   log_D_thrm ! D_mix for regions where mix_type = thermo_haline_mixing
   !log_D_minimum ! D_mix for regions where mix_type = minimum_mixing
   !log_D_anon ! D_mix for regions where mix_type = anonymous_mixing
   
   gradT ! mlt value for required temperature gradient dlnT/dlnP

   gradr ! dlnT/dlnP required for purely radiative transport
   !grad_temperature ! smoothed dlnT/dlnP at cell boundary
   !grad_density ! smoothed dlnRho/dlnP at cell boundary
   
   gradL ! gradient for Ledoux criterion for convection
   !sch_stable ! 1 if grada > gradr, 0 otherwise
   !ledoux_stable ! 1 if gradL > gradr, 0 otherwise
   
   ! the "for_mixing" values are the ones used to calculate the mixing diffusion coeffs,
   ! i.e., from the start of the step.  
   ! the names without "for_mixing" are the values at the end of the step.
   
   !dominant_isoA_for_thermohaline
   !dominant_isoZ_for_thermohaline
   !gradL_composition_term
   
   !logM ! log10(m/Msun)
   mass ! m/Msun. mass coordinate of outer boundary of cell.
   !mmid ! mass at midpoint of cell (average of mass coords of the cell boundaries)  Msun units.
   
   !m_grav ! total enclosed gravitational mass. Msun units.
   !m_grav_div_m_baryonic ! mass_gravitational/mass at cell boundary
   !mass_correction_factor ! dm_gravitational/dm (dm is baryonic mass of cell)
   
   !xm ! mass exterior to point (Msun units)
   dq ! mass of zone as a fraction of total star mass
   logxq ! log10(1-q)
   logxm ! log10(xm)
   
   !dr ! cell width (cm)
   !log_dr ! log10 cell width (cm)
   !dr_div_cs ! cell sound crossing time (sec)
   !acoustic_radius ! sound time from center to outer cell boundary (sec)
   !acoustic_depth ! sound time from surface to outer cell boundary (sec)
   !acoustic_r_div_R_phot
   !log_dr_div_cs ! log10 cell sound crossing time (sec)
   !dr_div_cs_yr ! cell sound crossing time (years)
   !log_dr_div_cs_yr ! log10 cell sound crossing time (years)
   
   
   
   x ! hydrogen mass fraction
   !log_x
   y ! helium mass fraction
   !log_y
   z ! metallicity
   !log_z ! metallicity

   add_abundances ! this adds all of the isos that are in the current net
   ! NOTE: you can list specific isotopes by giving their names (from chem_def)
      
      !h1
      !he3
      !he4
      !c12
      !n14
      !o16

   !add_log_abundances ! this adds log10 of all of the isos that are in the current net
   ! NOTE: you can list specific isotopes by giving their names (from chem_def)
      
      !log h1
      !log he3
      !log he4
      !log c12
      !log n14
      !log o16
      
      
   ! log concentration of species
      ! concentration = number density / number density of electrons
      !  Ci = (Xi/Ai) / sum(Zi*Xi/Ai)   [see Thoul et al, ApJ 421:828-842, 1994]
   
      !log_concentration h1
      !log_concentration he4
      

   ! ergs/g/sec for reaction categories
   
      add_reaction_categories ! this adds all the reaction categories
      ! NOTE: you can list specific categories by giving their names (from net_def)
      
      !pp
      !cno
      !tri_alfa
      
      omega ! angular velocity = j_rot/i_rot
      !log_omega
      log_j_rot
      !log_J_div_M53 ! J is j*1e-15 integrated from center; M53 is m^(5/3)
      !log_J_inside ! J_inside is j_rot integrated from center
      !shear ! -dlnomega/dlnR
      !log_abs_shear ! log10(abs(dlnomega/dlnR))
      !richardson_number
      i_rot ! specific moment of interia at cell boundary
      j_rot ! specific angular momentum at cell boundary
      !v_rot ! rotation velocity at cell boundary (km/sec)
      fp_rot ! rotation factor for pressure
      ft_rot ! rotation factor for temperature
      w_div_w_crit_roche
      omega_div_omega_crit
      !ft_rot_div_fp_rot ! gradr factor
      log_am_nu ! angular momentum diffusion coef at cell boundary
         ! this is the rotational_viscosity, nu, from Heger 2000 eqn for ang. mom. transport.
      
      r_polar ! (Rsun)
      !log_r_polar ! log10 (Rsun)
      r_equatorial ! (Rsun)
      !log_r_equatorial ! log10 (Rsun)
      !r_e_div_r_p ! equatorial/r_polar
      !omega_crit ! breakup angular velocity = sqrt(G M / equatorial^3)
      !omega_div_omega_crit
      
      !am_log_sig
      
      am_log_D_visc ! diffusion coeff for kinematic viscosity      
      am_log_D_DSI ! diffusion coeff for dynamical shear instability      
      am_log_D_SH ! diffusion coeff for Solberg-Hoiland instability      
      am_log_D_SSI ! diffusion coeff for secular shear instability
      am_log_D_ES ! diffusion coeff for Eddington-Sweet circulation
      am_log_D_GSF ! diffusion coeff for Goldreich-Schubert-Fricke instability
      am_log_D_ST ! Spruit dynamo mixing diffusivity
      am_log_nu_ST ! Spruit dynamo effective viscosity
      
      !dynamo_log_B_r ! (Gauss)
      !dynamo_log_B_phi ! (Gauss)


   

      !gradr_sub_grada ! gradr - grada; > 0 => Schwarzschild unstable for convection
      
      

      
      !delta_r ! r(outer edge) - r(inner edge); radial extent of cell in cm.
      !dt_dv_div_dr ! dt*delta_v/delta_r; need to have this << 1 for every cell
      
      ! electric field from element diffusion calculation
      !e_field
      !log_e_field
      
      
      ! element diffusion velocity for species
      !edv h1
      !edv he4
      !edv o16
      
      !diffusion_D h1 ! self diffusion coeff
      
      !diffusion_dX h1 ! change in h1 mass fraction from diffusion
      !diffusion_dX he4 ! change in he4 mass fraction from diffusion
      !diffusion_dX n20 ! change in n20 mass fraction from diffusion
      
      !delta_r_advection h1   ! displacement in cm caused by integrated edv
      !delta_r_advection he4   ! displacement caused by integrated edv
      !delta_r_advection ne20   ! displacement caused by integrated edv
      
      !delta_k_advection h1   ! displacement in cells caused by integrated edv
      !delta_k_advection he4   ! displacement caused by integrated edv
      !delta_k_advection ne20   ! displacement caused by integrated edv
      
      !delta_r_div_H_advection h1   ! delta_r_advection / r
      !delta_r_div_H_advection he4   ! delta_r_advection / r
      !delta_r_div_H_advection ne20   ! delta_r_advection / r
      
      !v_rad h1   ! velocity from radiative levitation
      !v_rad he4   ! velocity from radiative levitation
      !v_rad ne20   ! velocity from radiative levitation
      
      !log_g_rad h1   ! log10 acceleration from radiative levitation
      !log_g_rad he4   ! log10 acceleration from radiative levitation
      !log_g_rad ne20   ! log10 acceleration from radiative levitation
      
      
      
      
      ! ionization state for given species
      !ionization he4
      !ionization c12
      !ionization fe52
         
         
      !cno_div_z ! abundance of c12, n14, and o16 as a fraction of total z
      
      !dlog_h1_dlogP ! (log(h1(k)) - log(h1(k-1)))/(log(P(k)) - log(P(k-1)))
      !dlog_he3_dlogP
      !dlog_he4_dlogP
      !dlog_c12_dlogP
      !dlog_c13_dlogP
      !dlog_n14_dlogP
      !dlog_o16_dlogP
      !dlog_ne20_dlogP
      !dlog_mg24_dlogP
      !dlog_si28_dlogP
      
      !dlog_pp_dlogP
      !dlog_cno_dlogP
      !dlog_3alf_dlogP
      
      !dlog_burn_c_dlogP
      !dlog_burn_n_dlogP
      !dlog_burn_o_dlogP
      
      !dlog_burn_ne_dlogP
      !dlog_burn_na_dlogP
      !dlog_burn_mg_dlogP
      
      !dlog_cc_dlogP
      !dlog_co_dlogP
      !dlog_oo_dlogP
      
      !dlog_burn_si_dlogP
      !dlog_burn_s_dlogP
      !dlog_burn_ar_dlogP
      !dlog_burn_ca_dlogP
      !dlog_burn_ti_dlogP
      !dlog_burn_fe_dlogP
      
      !dlog_pnhe4_dlogP
      !dlog_photo_dlogP
      !dlog_other_dlogP


      !brunt_N2 ! brunt-vaisala frequency squared
      !brunt_N2_structure_term
      !brunt_N2_composition_term
      !log_brunt_N2_structure_term
      !log_brunt_N2_composition_term
      !brunt_A ! = N^2*r/g
      !brunt_N2_dimensionless ! N2 in units of 3GM/R^3
      !brunt_N_dimensionless ! N in units of sqrt(3GM/R^3)
      !brunt_frequency ! cycles per day
      !brunt_N ! sqrt(abs(brunt_N2))
      !log_brunt_N ! log10(brunt_N)
      !log_brunt_N2 ! log10(brunt_N2)
      !log_brunt_N2_dimensionless ! log10(brunt_N2_dimensionless)
      
      !sign_brunt_N2 ! sign of brunt_N2 (+1 for Ledoux stable; -1 for Ledoux unstable)
      !lamb_S2 ! for l=1: S = 2*(csound/r)^2
      !lamb_S ! for l=1: S = sqrt(2)*csound/r

      !brunt_nu ! brunt_frequency in microHz
      
      
      !lamb_Sl1 ! for l=1; = sqrt(2)*csound/r   (microHz)
      !lamb_Sl2 ! for l=2; = sqrt(6)*csound/r   (microHz)
      !lamb_Sl3 ! for l=3; = sqrt(12)*csound/r   (microHz)

      !log_brunt_nu ! brunt_frequency in microHz
      !log_lamb_Sl1 ! for l=1; = sqrt(2)*csound/r   (microHz)
      !log_lamb_Sl2 ! for l=2; = sqrt(6)*csound/r   (microHz)
      !log_lamb_Sl3 ! for l=3; = sqrt(12)*csound/r   (microHz)
      !log_lamb_Sl10

      
      !brunt_B ! smoothed numerical difference
      !brunt_nonB ! = grada - gradT
      !brunt_N_div_r_integral ! integral from center of N*dr/r
      !k_r_integral ! integral from center of k_r*dr
      !brunt_N2_sub_omega2
      !sl2_sub_omega2
      
      !logQ ! logQ = logRho - 2*logT + 12
      
      !log_L_div_CpTMdot ! (unitless)
      
      !cs_at_cell_bdy ! sound speed at cell boundary (csound is at cell center)
      
      
   ! "extras"
      !extra 1
      

! the first few lines of the profile contain general info about the model.
! for completeness, those items are described here.

   ! initial mass and Z
      ! initial_mass
      ! initial_z
   ! general properties of the current state
      ! model_number
      ! num_zones
      ! star_age
      ! time_step
   ! properties at the photosphere
      ! Teff
      ! photosphere_L
      ! photosphere_r
   ! properties at the outermost zone of the model
      ! log_surface_L
      ! log_surface_radius
      ! log_surface_temp
   ! properties near the center of the model
      ! log_center_temp
      ! log_center_density
      ! log_center_P
      ! center_eta
   ! abundances near the center
      ! center_h1
      ! center_he3
      ! center_he4
      ! center_c12
      ! center_n14
      ! center_o16
      ! center_ne20
   ! information about total mass
      ! star_mass
      ! star_mdot
      ! star_mass_h1
      ! star_mass_he3
      ! star_mass_he4
      ! star_mass_c12
      ! star_mass_n14
      ! star_mass_o16
      ! star_mass_ne20
   ! locations of abundance transitions
   ! location of optical depths 10 and 100
      ! tau10_mass
      ! tau10_radius
      ! tau100_mass
      ! tau100_radius
   ! time scales
      ! dynamic_time
      ! kh_timescale
      ! nuc_timescale
   ! various kinds of total power
      ! power_nuc_burn
      ! power_h_burn
      ! power_he_burn
      ! power_neu
   ! a few control parameter values
      ! h1_boundary_limit
      ! he4_boundary_limit
      ! c12_boundary_limit
      ! burn_min1
      ! burn_min2
