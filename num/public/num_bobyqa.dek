! ***********************************************************************
!
!   Copyright (C) 2010  Bill Paxton & The MESA Team
!
!   This program is free software: you can redistribute it and/or modify
!   it under the terms of the GNU Lesser General Public License
!   as published by the Free Software Foundation,
!   either version 3 of the License, or (at your option) any later version.
!
!   This program is distributed in the hope that it will be useful,
!   but WITHOUT ANY WARRANTY; without even the implied warranty of
!   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
!   See the GNU Lesser General Public License for more details.
!
!   You should have received a copy of the GNU Lesser General Public License
!   along with this program. If not, see <https://www.gnu.org/licenses/>.
!
! ***********************************************************************

! by M.J.D. Powell (mjdp@cam.ac.uk)

      subroutine bobyqa(n, npt, x, xl, xu, rhobeg, rhoend, iprint, maxfun, w, calfun, max_valid_value)
         use mod_bobyqa, only: do_BOBYQA
         use const_def, only: dp
         implicit none
         integer, intent(in) :: n, npt, iprint, maxfun
         real(dp), intent(in) :: xl(:), xu(:), rhobeg, rhoend, max_valid_value
         real(dp), intent(inout) :: x(:)
         real(dp), intent(inout) :: w(:)
         interface
            include 'num_bobyqa_proc.dek'
         end interface
         call do_BOBYQA(n, npt, x, xl, xu, rhobeg, rhoend, iprint, maxfun, w, calfun, max_valid_value)
      end subroutine bobyqa

!     This subroutine seeks the least value of a function of many variables,
!     by applying a trust region method that forms quadratic models by
!     interpolation. There is usually some freedom in the interpolation
!     conditions, which is taken up by minimizing the Frobenius norm of
!     the change to the second derivative of the model, beginning with the
!     zero matrix. The values of the variables are constrained by upper and
!     lower bounds. The arguments of the subroutine are as follows.
!
!     N must be set to the number of variables and must be at least two.
!     NPT is the number of interpolation conditions. Its value must be in
!       the interval [N+2,(N+1)(N+2)/2]. Choices that exceed 2*N+1 are not
!       recommended.
!     Initial values of the variables must be set in X(1),X(2),...,X(N). They
!       will be changed to the values that give the least calculated F.
!     For I=1,2,...,N, XL(I) and XU(I) must provide the lower and upper
!       bounds, respectively, on X(I). The construction of quadratic models
!       requires XL(I) to be strictly less than XU(I) for each I. Further,
!       the contribution to a model from changes to the I-th variable is
!       damaged severely by rounding errors if XU(I)-XL(I) is too small.
!     RHOBEG and RHOEND must be set to the initial and final values of a trust
!       region radius, so both must be positive with RHOEND no greater than
!       RHOBEG. Typically, RHOBEG should be about one tenth of the greatest
!       expected change to a variable, while RHOEND should indicate the
!       accuracy that is required in the final values of the variables. An
!       error return occurs if any of the differences XU(I)-XL(I), I=1,...,N,
!       is less than 2*RHOBEG.
!     The value of IPRINT should be set to 0, 1, 2 or 3, which controls the
!       amount of printing. Specifically, there is no output if IPRINT=0 and
!       there is output only at the return if IPRINT=1. Otherwise, each new
!       value of RHO is printed, with the best vector of variables so far and
!       the corresponding value of the objective function. Further, each new
!       value of F with its variables are output if IPRINT=3.
!     MAXFUN must be set to an upper bound on the number of calls of CALFUN.
!     The array W will be used for working space. Its length must be at least
!       (NPT+5)*(NPT+N)+3*N*(N+5)/2.
!
!     SUBROUTINE CALFUN (N,X,F) must set
!     F to the value of the objective function for the current values of the
!     variables X(1),X(2),...,X(N), which are generated automatically in a
!     way that satisfies the bounds given in XL and XU.

!        The name BOBYQA denotes Bounded Optimization BY Quadratic
!   Approximation, the constraints being lower and upper bounds on every
!   variable, which can be set to huge values for unconstrained variables.
!   The algorithm is intended to change the variables to values that are close
!   to a local minimum of F. The user, however, should assume responsibility for
!   finding out if the calculations are satisfactory, by considering carefully
!   the values of F that occur. The BOBYQA software has been developed from the
!   method of the paper "The NEWUOA software for unconstrained minimization
!   without derivatives", in Large-Scale Nonlinear Optimization, editors G. Di
!   Pillo and M. Roma, Springer (2006), pages 255-297.
!
!        In addition to providing CALFUN, an initial vector of variables and
!   the lower and upper bounds, the user has to set the values of the parameters
!   RHOBEG, RHOEND and NPT. After scaling the individual variables if necessary,
!   so that the magnitudes of their expected changes are similar, RHOBEG is the
!   initial steplength for changes to the variables, a reasonable choice being
!   the mesh size of a coarse grid search. Further, RHOEND should be suitable for
!   a search on a very fine grid. Typically, the software calculates a vector
!   of variables that is within distance 10*RHOEND of a local minimum. Another
!   consideration is that every trial vector of variables is forced to satisfy
!   the lower and upper bounds, but there has to be room to make a search in all
!   directions. Therefore an error return occurs if the difference between the
!   bounds on any variable is less than 2*RHOBEG. The parameter NPT specifies
!   the number of interpolation conditions on each quadratic model, the value
!   NPT=2*N+1 being recommended for a start, where N is the number of variables.
!   It is often worthwhile to try other choices too, but much larger values tend
!   to be inefficient, because the amount of routine work of each iteration is
!   of magnitude NPT**2, and because the achievement of adequate accuracy in some
!   matrix calculations becomes more difficult. Some excellent numerical results
!   have been found in the case NPT=N+6 even with more than 100 variables.
