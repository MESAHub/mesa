
      ! explicit Runge-Kutta ODE integrator of order 5(4)

      ! based on methods of Dormand and Prince
      ! as implemented by E.Hairer (see copyright below)

      ! this code is described in:
      !     E. HAIRER, S.P. NORSETT AND G. WANNER, SOLVING ORDINARY
      !     DIFFERENTIAL EQUATIONS I. NONSTIFF PROBLEMS. 2ND EDITION.
      !     SPRINGER SERIES IN COMPUTATIONAL MATHEMATICS,
      !     SPRINGER-VERLAG (1993)

      ! automatic stepsize control
      ! dense output by interpolation within recent step.
      ! optional monitoring for stiffness.

      ! the mesa implementation is thread-safe,
      ! so you can run multiple solutions in parallel.

      subroutine dopri5(n, fcn, x, y, xend, h, max_step_size, max_steps, rtol, atol, itol, solout, iout, work, lwork, iwork, liwork, lrpar, rpar, lipar, ipar, lout, idid)

         use mod_dopri5, only:do_dopri5
         use const_def, only: dp

         integer, intent(in) :: n ! the dimension of the system

         interface ! subroutine for computing the value of f(x, y)
            include "num_fcn.dek"
         end interface

         real(dp), intent(inout) :: x
            ! input: initial x value
            ! output: x value for which the solution has been computed.
            !     after successful return, x = xend.
         real(dp), intent(inout), pointer :: y(:) ! (n)
            ! input: initial values for y
            ! output: values of y for final value of x.
         real(dp), intent(in) :: xend ! desired final x value (positive or negative)
         real(dp), intent(inout) :: h
            ! input: initial step size
            ! output: size of the last accepted step
         real(dp), intent(in) :: max_step_size ! maximal step size.
            ! max_step_size = 0 defaults to xend-x.
         integer, intent(in) :: max_steps ! maximal number of allowed steps.

         ! absolute and relative error tolerances
         real(dp), intent(in) :: rtol(*) ! relative error tolerance(s)
         real(dp), intent(in) :: atol(*) ! absolute error tolerance(s)
         integer, intent(in) :: itol ! switch for rtol and atol
         ! itol=0: both rtol and atol are scalars.
            ! error_scale for y(i) is rtol*abs(y(i))+atol
         ! itol=1: both rtol and atol are vectors.
            ! error_scale for y(i) is rtol(i)*abs(y(i))+atol(i).
         ! rms_error = sqrt(sum((yerror/error_scale)**2)/nv)
         ! the solution is accepted if rms_error is less than 1.

         interface ! subroutine called after each successful step
            include "num_solout.dek"
         end interface
         ! switch for calling the subroutine solout or nor
         integer, intent(in)  :: iout
            ! iout=0: subroutine is never called
            ! iout=1: subroutine is used for output
            ! iout=2: dense output is performed in solout
            !     (in this case iwork(5) must be specified > 0)

         ! work arrays.
         ! NOTE: call dopri5_work_sizes to values for lwork and liwork.
         integer, intent(in) :: liwork, lwork
         integer, intent(inout), pointer :: iwork(:) ! (liwork)
         real(dp), intent(inout), pointer :: work(:) ! (lwork)
         ! for standard use, iwork and work must be set to zero before calling.
         ! only exception is for sophisticated use of special parameters.

         ! sophisticated setting of parameters
            ! several parameters (work(1), ..., iwork(1), ...) allow you
            ! to adapt the code. for zero input, the code chooses default values.

            ! work(1)   uround, the rounding unit, default 2.3d-16.

            ! work(2)   the safety factor in step size prediction, default 0.9d0.

            ! work(3), work(4)   parameters for step size selection
               ! the new step size is chosen subject to the restriction
               !     work(3) <= hnew/hold <= work(4)
               ! default values: work(3)=0.2d0, work(4)=10.d0

            ! work(5)   is the "beta" for stabilized step size control
               ! (see section iv.2). positive values of beta ( <= 0.04 )
               ! make the step size control more stable.
               ! negative work(5) provoke beta=0.
               ! default 0.0d0.

            ! iwork(2)  switch for the choice of the coefficients
               ! if iwork(2).eq.1  method dopri5 of dormand and prince
               ! (table 5.2 of section ii.5).
               ! the default value (for iwork(2)=0) is iwork(2)=1.

            ! iwork(4)  test for stiffness is activated after step number
               ! j*iwork(4) (j integer), provided iwork(4).gt.0.
               ! for negative iwork(4) the stiffness test is
               ! never activated; default value is iwork(4)=1000
               ! if lout > 0, there will be a warning message for stiffness
               ! if lout < 0, there will be an error return with idid = -4

            ! iwork(5)  = nrdens = number of components for which dense output
               ! is required; default value is iwork(5)=0;
               ! for   0 < nrdens < n   the components (for which dense
               !  output is required) have to be specified in
               ! iwork(21), ..., iwork(nrdens+20);
               ! or  nrdens=n  this is done by the code.

         ! parameter arrays for the caller supplied routines
         integer, intent(in) :: lrpar, lipar
         integer, intent(inout), pointer :: ipar(:) ! (lipar)
         real(dp), intent(inout), pointer :: rpar(:) ! (lrpar)

         ! statistics returned in iwork
         ! iwork(17)  nfcn    number of function evaluations
         ! iwork(18)  nstep   number of computed steps
         ! iwork(19)  naccpt  number of accepted steps
         ! iwork(20)  nrejct  number of rejected steps (due to error test),
         !                    (step rejections in the first step are not counted)

         ! io unit for warnings and errors
         integer, intent(in)  :: lout
            ! if lout > 0, warnings and errors are written to this io unit.
            ! if lout <= 0, no output is produced.

         ! result code
         integer, intent(out)  :: idid
            ! idid =  1  computation successful,
            ! idid =  2  computation successful (terminated by solout)
            ! idid = -1  input is not consistent,
            ! idid = -2  reached max allowed number of steps,
            ! idid = -3  step size becomes too small,
            ! idid = -4  problem is probably stiff (interrupted).
            ! idid = -5  problem terminated by initial fcn ierr /= 0.

         ! ****************************************************************************

         call do_dopri5(n, fcn, x, y, xend, h, max_step_size, max_steps, rtol, atol, itol, solout, iout, work, lwork, iwork, liwork, lrpar, rpar, lipar, ipar, lout, idid)

      end subroutine dopri5


      ! this subroutine calculates liwork and lwork
      subroutine dopri5_work_sizes(n, nrdens, liwork, lwork)
         integer, intent(in) :: n, nrdens
         integer, intent(out) :: liwork, lwork

         lwork = 8*n+5*nrdens+24
         liwork = nrdens+21

      end subroutine dopri5_work_sizes


! The following is the copyright for DOPRI5

! Copyright (c) 2004, Ernst Hairer

! Redistribution and use in source and binary forms, with or without
! modification, are permitted provided that the following conditions are
! met:

! - Redistributions of source code must retain the above copyright
! notice, this list of conditions and the following disclaimer.

! - Redistributions in binary form must reproduce the above copyright
! notice, this list of conditions and the following disclaimer in the
! documentation and/or other materials provided with the distribution.

! THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS “AS
! IS” AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
! TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A
! PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE REGENTS OR
! CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
! EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
! PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
! PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
! LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
! NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
! SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
