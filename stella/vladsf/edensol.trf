 -- ------------------------------------------------------------------------
 --              s u b r o u t i n e   e d e n s o l
 -- ------------------------------------------------------------------------
 -- This subroutine computes the electron density in TE for a given set
 -- of abundances using the Saha-Boltzmann solver, `sahaeqn'.

  _define @edz "press = bc * T * (eden + dennuc);
--        write(*,*)'in define rho == ', rho; 
          edz = 0.d+00;
          dedzded = 0.d+00;
          do izmax = 1, numelems;
           iz = indexv(izmax);
           if (abundx(iz) .gt. 0.d+00) then;
             ionmax = min(iz + 1, 6);
             ionmaxm1 = ionmax - 1;
             dentot = rho * abundx(iz) / nucmass(iz);
 -- Returned in FRAC is the ionization fraction of element IZ.
             call sahaeqn(1, .true., press, T, eden,
                  iz, 6, i1, frac, partition);
--                  write(*,*) ' edensol->frac(0)=',frac(0);
             do i = 1, ionmax;
                edz = edz + frac(i) * dentot * dble(i + i1 - 2);
             end do;
--             dpress = Tk * eden * delta;
             dpress = bc * T * eden * delta;
             call sahaeqn(1, .true., press + dpress, T, eden * deltap1,
                  iz, 6, i1, frac, partition);
             do i = 1, ionmax;
                dedzded = dedzded + frac(i) * dentot * dble(i + i1 - 2);
             end do;
           endif;
          end do;
 --             <- izmax.
          dedzded = (dedzded - edz) / (delta * eden);
          chrgxs = edz - eden;
          dchrdlne = eden * dedzded - eden;
          dlned = -chrgxs / dchrdlne; "
  --       " write(*,'(a,1p,3e12.4)') ' dlned eden edz - eden=',dlned,eden,edz - eden;  "

  
      subroutine edensol(rho, T, abundx, eden, maxiter, acc, numelems);
      implicit real*8 (a-h,o-z);
      PARAMETER(MAXIONM1=(6  - 1));
      PARAMETER(NSBINTVL=3*10 );
 --
  
  
 --      pointer(ptrnucmass, nucmass)
      parameter(inucmas=99);
      real*8 nucmass(inucmas);
  
      real*8 abundx(99 ), rho, eden, T;
      integer indexv(99 );
      integer numelems;
  
      real*8 frac(0:6), partition(0:6);
      save ptrnucmass, init;
      data init/1/;
  
      data pi/3.141592653589793d+00/, fourpi/12.5637061d+00/;
      data bc/1.380626d-16/, h/6.626205d-27/, hev/4.1357d-15/;
      data c/2.997925d+10/, elecxsec/6.6524d-25/;
      data evtoerg/1.6022d-12/, a/7.56464d-15/;
      data stefbltz/5.66956d-05/, hmass/1.67352d-24/;
      data esu/4.80298d-10/, emass/9.1091d-28/;
      data srpi/1.772453851d+00/, bcev/8.617064d-05/;
  
 -- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  
  
       if (init .eq. 1) then;
 --         call mzalloc('ptrnucmass ', ptrnucmass, 99  * 8 ,inucmas * 8 ,
 --     ~ 'inucmas    ','edensol   ')
          call setnucms(nucmass);
          init = 0;
          eden=0.d0;
       end if;
  
       delta = 1.d-05;
       deltap1 = 1.d+00 + delta;
 -- Sort elements into decreasing abundance.
       call tablsort(99 , abundx, indexv, -1);
       dennuc = 0.d+00;
  
       do izmax = 1, numelems;
          dennuc = dennuc + rho * abundx(indexv(izmax)) /
               nucmass(indexv(izmax));
       end do;

       if (eden .lt. 1.d-05) eden = dennuc;
  
--       Tk = bc * T; -- not allocated at ifort optimization
--       Tkev = Tk / evtoerg;
       Templog = dlog(T);
--       hckT = h * c / Tk;
       hckT = h * c / (bc*T);
  
       do iter = 1, maxiter;
           @edz; -- outputs dlned depending on eden
 --ccc         eden = min(max(eden * dexp(dlned), 0.1d+00 * eden), 10.d+00 * eden)
       	 eden = max( eden * dexp(min(dlned,2.3025851d0)), 0.1d0 * eden)  ;
          if (dabs(dlned) .lt. acc) return;
       end do;

 -- If here, then electron density did not converge by Newton iteration.
          <*bin: FIND SOLUTION BY binary search *>;
    IF(IFAIL.ne.0)then; 
       write(0,*) ' * Failure to obtain convergence of electron',
            ' density in EDENSOL. ** ';
       write(0,1010) rho, T, eden,  acc, maxiter;
 1010:format(' * rho: ', 1pe12.5,' T:  ', 1pe12.5,/,
            ' ** eden:  ', 1pe12.5,' acc:', 1pe12.5,/,
            ' ** maxiter: ',i5,/,' <z,  abund> ');
 1020:format(i4,1x,1pe12.5);
       write(0,1020) (iz, abundx(iz), iz = 1, 99);
       write(0,*) '-----------------------------',
            '-----------------------------';
    ENDIF;
       return;
       end;

%_bin:
  --  Xro=eden;
  -- dPr=Zerwoo(Xro); -- Xro is not always == rho
  NITMAX=maxiter;
  @edz 
  IFAIL = 1;
  ian=0;
  ITQ=0;
  _Select
    _  dlned<0.
    [  _While ( dlned < 0. & ITQ .lt. NITMAX) _do
         Ast=10.**(min(-12+ian,-1))*eden;
         eden=eden-Ast;
         @edz; -- dlned=Zerwoo(eden);
         ian=ian+1;
         ITQ=ITQ+1;
       _od  ]
    _  dlned>0.
    [  _While ( dlned>0. & ITQ .lt. NITMAX) _do
         Ast=10.**(min(-12+ian,-1))*eden;
         eden=eden+Ast;
          @edz; -- dlned=Zerwoo(eden);
         ian=ian+1;
         ITQ=ITQ+1;
       _od  ]
    _other   [ IFAIL=0 ]  -- eden found
  _end
  
  Errest=abs(dlned);

-- it was mistake here: ! (ITQ > NITMAX)		 
  _While (abs(Ast)>acc*abs(eden) ! (ITQ>2 & abs(dlned)<Errest) & (ITQ < NITMAX) ) & IFAIL^=0 _do
     Errest=abs(dlned);
     Ast=+0.5D0*SIGN(Ast,dlned);
     eden=eden+Ast;
      @edz; -- dlned=Zerwoo(eden);
     ITQ=ITQ+1;
  _od
		 
  If( abs(dlned)>=ERREST ) then;
     eden=eden-Ast;
      @edz; -- dlned=Zerwoo(eden);
     IFAIL=0;
  Endif;
  If( abs(Ast)<=acc*abs(eden) )  IFAIL=0;
      IF (IFAIL^=0) then;
         WRITE (*,*)' stop in edensol.trf IFAIL=', IFAIL;
--         write(@term,*)' Km,PR0,Rho,Rhoin:', Km,PR0,X,rhoin;
         STOP 320;
      endif;

