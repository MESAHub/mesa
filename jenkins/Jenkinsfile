properties([
  disableConcurrentBuilds(),
  buildDiscarder(logRotator(numToKeepStr: '8', daysToKeepStr: '20'))
])

node('linux && docker && mesa') {
  /* use HOME=MESA_DIR=customWorkspace=dir for build */
  def dir = "${env.JENKINS_HOME}/mesa/${env.BRANCH_NAME}"
  def image
  withEnv([
    /* 4*4=16 isn't quite right as we're limited to 4, but in practice it seems work out */
    "OMP_NUM_THREADS=4",
    "NPROCS=4",
    "HOME=${dir}",
    "MESA_DIR=${dir}",
  ]) {
    stage('build') {
      ws(env.HOME) {
        timeout(time: 1, unit: 'HOURS') {
          checkout scm
          withCredentials([
              usernamePassword(credentialsId: 'mesa_test', passwordVariable: 'MESA_TEST_PSW', usernameVariable: 'MESA_TEST_USR'),
              string(credentialsId: 'mesa_test_logs_token', variable: 'MESA_LOGS_TOKEN')]) {
            writeYaml(file: "${env.HOME}/.mesa_test/config.yml", overwrite: true, data: [
              'computer_name': 'Jenkins',
              'email': env.MESA_TEST_USR,
              'password': env.MESA_TEST_PSW,
              'logs_token': env.MESA_LOGS_TOKEN,
              'github_protocol': ':ssh',
              'mesa_mirror': "${env.HOME}/mirror", /* not used */
              'mesa_work': env.MESA_DIR,
              'platform': 'Linux',
              'platform_version': 'Ubuntu'
            ])
          }
          image = docker.build("flatironinstitute/mesa:${env.BRANCH_NAME}", "jenkins")
          image.inside() {
            sh '''#!/bin/bash -ex
              source $MESASDK_ROOT/bin/mesasdk_init.sh
              mesa_test install --no-checkout
              mesa_test submit --empty
            '''
          }
        }
      }
    }

    def nstages = 10
    def testStages = [:]
    for (int i = 1; i <= nstages; i++) {
      def test = "Stage ${i}"
      testStages[test] = { ->
        withEnv(["NSTAGES=${nstages}"]) {
          stage(test) {
            timeout(time: 2, unit: 'HOURS') {
              catchError(buildResult: 'UNSTABLE', stageResult: 'UNSTABLE') {
                image.inside("-v ${dir}:${dir}:rw") {
                  sh '''#!/bin/bash -ex
                    source $MESASDK_ROOT/bin/mesasdk_init.sh

                    # count total number of tests
                    NS=$(cd "$MESA_DIR/star/test_suite" && ./count_tests)
                    NB=$(cd "$MESA_DIR/astero/test_suite" && ./count_tests)
                    NA=$(cd "$MESA_DIR/binary/test_suite" && ./count_tests)
                    NTESTS=$((NS+NB+NA))

                    # hack to get starting stage
                    STAGE=$(echo $STAGE_NAME | grep -Eo "[0-9]+")

                    # trigger one stage of tests
                    for ((i=STAGE; i<=NTESTS; i+=NSTAGES))
                    do
                        mesa_test test $i
                    done
                  '''
                }
              }
            }
          }
        }
      }
    }
    parallel testStages
  }
}
